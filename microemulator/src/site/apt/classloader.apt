~~ @version $Revision$ ($Author$) $Date$
~~ See this file format http://maven.apache.org/guides/mini/guide-apt-format.html

                                    ------------------
                                    MIDlet ClassLoader


MIDlet ClassLoader

    MicroEmulator is using special ClassLoader to load MIDlet midlet classes and resources.
    This ClassLoader is not used when application is running as applet or --appclassloader=system (--usesystemclassloader) specified.

    MIDlet ClassLoader has folowing functionality

    * bytecode preprocessing/instrumentation

    * Security aware  - enables load and run app in Webstart.

    * Enforce class loading order. MIDlet classes loaded first then system (java.) and MicroEmulator classes (javax.)

    * Enforce resource loading order.

    * Enforce static initializers in MIDlet. Each time you start MIDlet new ClassLoader is created. TODO.


    ClassLoader configuration

    * --appclasspath | -appcp <CLASSPATH> for MIDlet application components if any; ignored when opening .jad

    * --appclass <library class name> for appclasspath auto detection from system classpath; ignored when opening .jad

    * --appclassloader=system (--usesystemclassloader)


    MIDlet ClassLoader allow MIDlet to load classes only from MIDlet jar or --appclasspath. Classes from java. and javax.microedition. are loaded from parent class loader e.g. ClassLoader of MicroEmulator application.

    Argument --appclass is a helper for --appclasspath. If your MIDlet application classes are already in system classpath when starting MicroEmulator
    then --appclass will find the location URL of this classe (directory or jar) and add this URL to MIDletClassLoader then same as --appclasspath.

    MicroEmulator usage

---
    java -cp CLASSPATH org.microemu.app.Main application.main.MIDlet
---

    Is effectively the same as

---
    java -cp CLASSPATH org.microemu.app.Main --appclass application.main.MIDlet application.main.MIDlet
---

Bytecode preprocessing

  We are using {{{http://asm.objectweb.org/}ASM}} for Bytecode manipulations.

  At runtime:

   * Calls to System.out, System.err are redirected to Injected.class to enable Logging in MicroEmulator console.

   * Calls to System.getProperty(), are redirected to Injected.class to enable java system properties change in WebStart application.

   * class.getResourceAsStream are redirected to solve resource loading paterns commonly used in MIDlets and not aceptable in Java SE application
     when System class is called to load MIDlet resource

   * Timers and Threads created by MIDlet are controled by MicroEmulator and are terminated when MIDlet ends.
     {{{http://microemulator.svn.sourceforge.net/viewvc/microemulator/trunk/microemulator/microemu-javase/src/main/java/org/microemu/app/util/MIDletTimer.java?view=markup}MIDletTimer}}
     and {{{http://microemulator.svn.sourceforge.net/viewvc/microemulator/trunk/microemulator/microemu-javase/src/main/java/org/microemu/app/util/MIDletThread.java?view=markup}MIDletThread}}
     would be used in your application.

  "Save for Web...":

    We are adding new class {{{http://microemulator.svn.sourceforge.net/viewvc/microemulator/trunk/microemulator/microemu-injected/src/main/java/org/microemu/Injected.java?view=markup}org.microemu.Injected}} to new JAR.
    Calls to System.getProperty(), System.out, System.err and getResourceAsStream are redirected to MicroEmulator Injected class.
